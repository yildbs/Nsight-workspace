#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/objdetect.hpp>

#include <ycv/core/core.hpp>

int main()
{
	int image_width = 1280;
	int image_height = 720;

	cv::Mat image = cv::imread("/home/yildbs/Data/sample.ppm");
	cv::resize(image, image, cv::Size(image_width, image_height));
	cv::imshow("image", image);
	cv::waitKey(0);

//	cv::HOGDescriptor hog(
//			cv::Size(image_width, image_height),
//			cv::Size(16, 16),
//			cv::Size(8, 8),
//			8,
//			9
//	);


	ycv::hog::HOGDescriptorSingle hog;

	int cell_size = 8;
	hog.Initialize(
		image_width,
		image_height,
		3,
		1.0,
		true,
		false,
		9,
		cell_size,
		2,
		static_cast<int>(image_width/cell_size),
		static_cast<int>(image_height/cell_size)
	);

//            , const int cell_size=8
//            , const int block_size=2
//            , const int descriptor_size_width=6
//            , const int descriptor_size_height=12);
//			);


    this->hog_descriptors[level].Initialize(    resized_width
                                              , resized_height
                                              , channels
                                              , scale_factor_single
                                              , gamma_correction
                                              , signed_gradient
                                              , num_bins
                                              , cell_size
                                              , block_size
                                              , descriptor_size_width
                                              , descriptor_size_height);
    this->hog_descriptors[level].SetSupportVector(this->support_vector.GetLength(), this->support_vector.bits(), this->rho);




}
